generator kysely {
    provider = "prisma-kysely"

    output   = "../src/server"
    fileName = "db.types.ts"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Gift {
    id          String  @id @default(cuid())
    name        String
    description String? @db.Text()
    image       String?
    link        String? @db.Text()
    price       Float?
    slug        String  @unique
    visible     Boolean @default(true)
    selected    Boolean @default(false)
    sharableURL String  @default("")

    linkMetaTitle            String?
    linkMetaShortDescription String?
    linkMetaImage            String?

    owner            User?   @relation(fields: [ownerId], references: [id], name: "allMyGifts")
    ownerId          String?
    selectedBy       User?   @relation(fields: [selectedByUserId], references: [id])
    selectedByUserId String?

    lists GiftsOnLists[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId])
    @@index([selectedByUserId])
}

model List {
    id          String   @id @default(cuid())
    name        String   @default("Unnamed List")
    description String?
    image       String?
    dueOn       DateTime @default(now())
    visible     Boolean  @default(true)
    sharableURL String   @default("")
    slug        String   @unique

    owner   User?          @relation(fields: [ownerId], references: [id])
    ownerId String?
    gifts   GiftsOnLists[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId])
}

model GiftsOnLists {
    giftId String
    listId String

    gift Gift @relation(fields: [giftId], references: [id])
    list List @relation(fields: [listId], references: [id])

    @@id([giftId, listId])
    @@index([listId])
    @@index([giftId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    username      String?   @unique
    name          String?
    bio           String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    myGifts   Gift[] @relation("allMyGifts")
    myLists   List[]
    givingOut Gift[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
